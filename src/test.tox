  ParseRule {grouping, None,    PREC_CALL });       // TOKEN_LEFT_PAREN      
  ParseRule {None,     None,    PREC_NONE });       // TOKEN_RIGHT_PAREN     
  ParseRule {None,     None,    PREC_NONE });       // TOKEN_LEFT_BRACE
  ParseRule {None,     None,    PREC_NONE });       // TOKEN_RIGHT_BRACE     
  ParseRule {None,     None,    PREC_NONE });       // TOKEN_COMMA           
  ParseRule {None,     None,    PREC_CALL });       // TOKEN_DOT             
  ParseRule {unary,    binary,  PREC_TERM });       // TOKEN_MINUS           
  ParseRule {None,     binary,  PREC_TERM });       // TOKEN_PLUS            
  ParseRule {None,     None,    PREC_NONE });       // TOKEN_SEMICOLON       
  ParseRule {None,     binary,  PREC_FACTOR });     // TOKEN_SLASH           
  ParseRule {None,     binary,  PREC_FACTOR });     // TOKEN_STAR            
  ParseRule {None,     None,    PREC_NONE });       // TOKEN_BANG            
  ParseRule {None,     None,    PREC_EQUALITY });   // TOKEN_BANG_EQUAL      
  ParseRule {None,     None,    PREC_NONE });       // TOKEN_EQUAL           
  ParseRule {None,     None,    PREC_EQUALITY });   // TOKEN_EQUAL_EQUAL     
  ParseRule {None,     None,    PREC_COMPARISON }); // TOKEN_GREATER         
  ParseRule {None,     None,    PREC_COMPARISON }); // TOKEN_GREATER_EQUAL   
  ParseRule {None,     None,    PREC_COMPARISON }); // TOKEN_LESS            
  ParseRule {None,     None,    PREC_COMPARISON }); // TOKEN_LESS_EQUAL      
  ParseRule {None,     None,    PREC_NONE });       // TOKEN_IDENTIFIER      
  ParseRule {None,     None,    PREC_NONE });       // TOKEN_STRING          
  ParseRule {number,   None,    PREC_NONE });       // TOKEN_NUMBER          
  ParseRule {None,     None,    PREC_AND });        // TOKEN_AND             
  ParseRule {None,     None,    PREC_NONE });       // TOKEN_CLASS           
  ParseRule {None,     None,    PREC_NONE });       // TOKEN_ELSE            
  ParseRule {None,     None,    PREC_NONE });       // TOKEN_FALSE           
  ParseRule {None,     None,    PREC_NONE });       // TOKEN_FUN             
  ParseRule {None,     None,    PREC_NONE });       // TOKEN_FOR             
  ParseRule {None,     None,    PREC_NONE });       // TOKEN_IF              
  ParseRule {None,     None,    PREC_NONE });       // TOKEN_NIL             
  ParseRule {None,     None,    PREC_OR });         // TOKEN_OR              
  ParseRule {None,     None,    PREC_NONE });       // TOKEN_PRINT           
  ParseRule {None,     None,    PREC_NONE });       // TOKEN_RETURN          
  ParseRule {None,     None,    PREC_NONE });       // TOKEN_SUPER           
  ParseRule {None,     None,    PREC_NONE });       // TOKEN_THIS            
  ParseRule {None,     None,    PREC_NONE });       // TOKEN_TRUE            
  ParseRule {None,     None,    PREC_NONE });       // TOKEN_VAR             
  ParseRule {None,     None,    PREC_NONE });       // TOKEN_WHILE           
  ParseRule {None,     None,    PREC_NONE });       // TOKEN_ERROR           
  ParseRule {None,     None,    PREC_NONE });       // TOKEN_EOF                                                                        
